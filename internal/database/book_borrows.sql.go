// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: book_borrows.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getBookBorrow = `-- name: GetBookBorrow :one
SELECT id, issued_at, returned_at, created_at, updated_at, book_id, borrower_id FROM book_borrows WHERE book_id = $1 AND returned_at IS NULL
`

func (q *Queries) GetBookBorrow(ctx context.Context, bookID uuid.UUID) (BookBorrow, error) {
	row := q.db.QueryRowContext(ctx, getBookBorrow, bookID)
	var i BookBorrow
	err := row.Scan(
		&i.ID,
		&i.IssuedAt,
		&i.ReturnedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BookID,
		&i.BorrowerID,
	)
	return i, err
}

const issueBook = `-- name: IssueBook :one
INSERT INTO book_borrows (id, issued_at, created_at, updated_at, book_id, borrower_id)
VALUES ($1, NOW(), NOW(), NOW(), $2, $3)
RETURNING id, issued_at, returned_at, created_at, updated_at, book_id, borrower_id
`

type IssueBookParams struct {
	ID         uuid.UUID
	BookID     uuid.UUID
	BorrowerID uuid.UUID
}

func (q *Queries) IssueBook(ctx context.Context, arg IssueBookParams) (BookBorrow, error) {
	row := q.db.QueryRowContext(ctx, issueBook, arg.ID, arg.BookID, arg.BorrowerID)
	var i BookBorrow
	err := row.Scan(
		&i.ID,
		&i.IssuedAt,
		&i.ReturnedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BookID,
		&i.BorrowerID,
	)
	return i, err
}
