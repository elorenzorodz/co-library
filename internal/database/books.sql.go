// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: books.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const browseBooks = `-- name: BrowseBooks :many
SELECT id, title, author, created_at, updated_at, user_id FROM books
`

func (q *Queries) BrowseBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, browseBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createBook = `-- name: CreateBook :one
INSERT INTO books (id, title, author, created_at, updated_at, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, title, author, created_at, updated_at, user_id
`

type CreateBookParams struct {
	ID        uuid.UUID
	Title     string
	Author    string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :execrows
DELETE FROM books WHERE id = $1 AND user_id = $2
`

type DeleteBookParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteBook(ctx context.Context, arg DeleteBookParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteBook, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, created_at, updated_at, user_id FROM books WHERE id = $1
`

func (q *Queries) GetBook(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, title, author, created_at, updated_at, user_id FROM books WHERE user_id = $1
`

func (q *Queries) GetBooks(ctx context.Context, userID uuid.UUID) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books 
SET title = $1, author = $2, updated_at = NOW() 
WHERE id = $3 AND user_id = $4 
RETURNING id, title, author, created_at, updated_at, user_id
`

type UpdateBookParams struct {
	Title  string
	Author string
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.Title,
		arg.Author,
		arg.ID,
		arg.UserID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
